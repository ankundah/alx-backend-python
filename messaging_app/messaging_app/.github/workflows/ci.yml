name: Django CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: messaging_db
          MYSQL_USER: django
          MYSQL_PASSWORD: django
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      MYSQL_DATABASE: messaging_db
      MYSQL_USER: django
      MYSQL_PASSWORD: django
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      PYTHONPATH: ${{ github.workspace }}
      SECRET_KEY: testing-secret-key

    steps:
      # 1. Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install flake8 pytest pytest-cov

      # 4. Run Flake8 Linting (Fails Build on Error)
      - name: Run Flake8 Linting
        run: |
          echo "Running flake8..."
          flake8 messaging_app --count --show-source --statistics --max-line-length=120
          echo "Flake8 completed successfully."

      # 5. Wait for MySQL to be Ready
      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done

      # 6. Run Database Migrations
      - name: Run Migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate

      # 7. Run Django Tests with Coverage
      - name: Run Tests with Coverage
        run: |
          mkdir -p messaging_app/reports
          pytest --disable-warnings \
                 --cov=messaging_app \
                 --cov-report=html:messaging_app/reports/html \
                 --cov-report=xml:messaging_app/reports/coverage.xml \
                 --cov-report=term

      # 8. Upload Coverage Reports
      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            messaging_app/reports/html
            messaging_app/reports/coverage.xml
